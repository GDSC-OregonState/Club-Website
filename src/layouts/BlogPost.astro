---
import { Badge } from "@/components/ui/badge";
import { buttonVariants } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import Layout from "./Layout.astro";

// Extract post data
type Props = CollectionEntry<"blog">;

const slug = Astro.props.slug;
const {
  title,
  description,
  pubDate, 
  updatedDate,
  coverImage,
  category,
  inDev,
  publishDate,
} = Astro.props.data;

// Format date for display
const formattedDate = pubDate 
  ? new Date(pubDate).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  : null;

// Render the content
const { Content } = await Astro.props.render();
---

<Layout title={title}>
  <div class="min-h-screen bg-white rounded-lg shadow-lg">
    <div
      class="relative container max-w-screen-md mx-auto px-4 sm:px-6 lg:px-8 py-10"
    >
      <a
        href="/blog"
        class={cn(
          buttonVariants({ variant: "ghost" }),
          "absolute left-[-200px] top-10 hidden xl:inline-flex bg-gray-50 text-muted-foreground hover:bg-gray-100"
        )}
        transition:animate="slide"
      >
        See all posts
      </a>

      <article class="prose dark:prose-invert max-w-none">
        <Image
          class="w-full rounded-xl overflow-hidden my-6 object-contain"
          width={1020}
          height={510}
          src={coverImage}
          alt=""
          transition:name={"img-" + slug}
        />

        <h1
          class="font-heading text-4xl font-bold text-gray-900 my-4"
          transition:name={"title-" + slug}
        >
          {title}
        </h1>
        <p class="text-lg text-gray-600">{description}</p>
        
        {formattedDate && (
          <div class="flex items-center text-gray-500 mt-2 mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            <span>{formattedDate}</span>
            {updatedDate && updatedDate !== pubDate && (
              <span class="ml-3 text-sm">(Updated: {new Date(updatedDate).toLocaleDateString('en-US', {month: 'short', day: 'numeric', year: 'numeric'})})</span>
            )}
          </div>
        )}
        
        <hr class="my-8 border-gray-200" />
        <div class="prose-lg prose-gray"></div>

        {
          inDev ? (
            <>
              <div
                class="tenor-gif-embed"
                data-postid="18632420"
                data-share-method="host"
                data-aspect-ratio="1.25"
                data-width="100%"
              >
                <a href="https://tenor.com/view/work-work-in-progress-wip-hurray-design-in-progress-gif-18632420">
                  Work Work In Progress Sticker
                </a>
                from{" "}
                <a href="https://tenor.com/search/work-stickers">
                  Work Stickers
                </a>
              </div>
              <script
                type="text/javascript"
                async
                src="https://tenor.com/embed.js"
              />
              <h1>Check Back {publishDate}</h1>
            </>
          ) : (
            <Content />
          )
        }
      </article>
    </div>
  </div>
</Layout>
